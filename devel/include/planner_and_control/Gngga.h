// Generated by gencpp from file planner_and_control/Gngga.msg
// DO NOT EDIT!


#ifndef PLANNER_AND_CONTROL_MESSAGE_GNGGA_H
#define PLANNER_AND_CONTROL_MESSAGE_GNGGA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_and_control
{
template <class ContainerAllocator>
struct Gngga_
{
  typedef Gngga_<ContainerAllocator> Type;

  Gngga_()
    : latitude(0.0)
    , longitude(0.0)
    , quality_indicator(0.0)
    , noise(0.0)
    , satellite(0.0)  {
    }
  Gngga_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , quality_indicator(0.0)
    , noise(0.0)
    , satellite(0.0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _quality_indicator_type;
  _quality_indicator_type quality_indicator;

   typedef float _noise_type;
  _noise_type noise;

   typedef float _satellite_type;
  _satellite_type satellite;





  typedef boost::shared_ptr< ::planner_and_control::Gngga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_and_control::Gngga_<ContainerAllocator> const> ConstPtr;

}; // struct Gngga_

typedef ::planner_and_control::Gngga_<std::allocator<void> > Gngga;

typedef boost::shared_ptr< ::planner_and_control::Gngga > GnggaPtr;
typedef boost::shared_ptr< ::planner_and_control::Gngga const> GnggaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_and_control::Gngga_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_and_control::Gngga_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_and_control::Gngga_<ContainerAllocator1> & lhs, const ::planner_and_control::Gngga_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.quality_indicator == rhs.quality_indicator &&
    lhs.noise == rhs.noise &&
    lhs.satellite == rhs.satellite;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_and_control::Gngga_<ContainerAllocator1> & lhs, const ::planner_and_control::Gngga_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_and_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_and_control::Gngga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_and_control::Gngga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_and_control::Gngga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_and_control::Gngga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_and_control::Gngga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_and_control::Gngga_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_and_control::Gngga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63e398a035d41ac999d8966a3c9d2faa";
  }

  static const char* value(const ::planner_and_control::Gngga_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63e398a035d41ac9ULL;
  static const uint64_t static_value2 = 0x99d8966a3c9d2faaULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_and_control::Gngga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_and_control/Gngga";
  }

  static const char* value(const ::planner_and_control::Gngga_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_and_control::Gngga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 latitude\n"
"float64 longitude\n"
"\n"
"float32 quality_indicator # 0 - fix not available, 1 - GPS fix, 2 - Differential GPS fix\n"
"float32 noise\n"
"float32 satellite\n"
;
  }

  static const char* value(const ::planner_and_control::Gngga_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_and_control::Gngga_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.quality_indicator);
      stream.next(m.noise);
      stream.next(m.satellite);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gngga_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_and_control::Gngga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_and_control::Gngga_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "quality_indicator: ";
    Printer<float>::stream(s, indent + "  ", v.quality_indicator);
    s << indent << "noise: ";
    Printer<float>::stream(s, indent + "  ", v.noise);
    s << indent << "satellite: ";
    Printer<float>::stream(s, indent + "  ", v.satellite);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_AND_CONTROL_MESSAGE_GNGGA_H
